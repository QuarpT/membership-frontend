package controllers

import actions.CommonActions._
import com.gu.cas.{TokenPayload, Invalid, Valid}
import com.gu.googleauth.UserIdentity
import com.gu.identity.play.IdUser
import com.gu.subscriptions.CAS.{CASError, CASSuccess}
import com.typesafe.scalalogging.LazyLogging
import configuration.Config
import forms.CASForm
import play.api.libs.concurrent.Execution.Implicits._
import play.api.libs.json.Json
import play.api.mvc.Controller
import play.api.mvc.Security.AuthenticatedRequest
import views.support.CASResultOps._
import views.support.TokenPayloadOps._

import scala.concurrent.Future
import scala.util.{Failure, Success, Try}

object CAS extends Controller with LazyLogging {
  private implicit val encoder = Config.CAS.emergencyEncoder

  def index = GoogleAuthenticatedStaffAction { implicit request =>
    Ok(views.html.staff.cas())
  }

  def searchSubscription = GoogleAuthenticatedStaffAction.async(parse.form(CASForm.lookup)) { request =>
    val lookup = request.body

    // The encoder is not safe and can throw IndexOutOfBound exceptions
    Try(encoder.decode(lookup.subscriptionNumber)) match {
      case Success(Valid(payload)) =>
        Future.successful(Ok(Json.toJson(payload)))
      case Success(Invalid(_)) =>
        Config.casService.check(lookup.subscriptionNumber, lookup.postcode, lookup.lastName, triggersActivation = false).map {
          case r: CASSuccess => Ok(Json.toJson(r))
          case r: CASError => BadRequest(Json.toJson(r))
        }
      case Failure(_) =>
        Future.successful(BadRequest(Json.obj("message" -> "The generated token is invalid")))
    }
  }

  def generateToken = GoogleAuthenticatedStaffAction(parse.form(CASForm.emergencyToken)) { request =>
    // Some nasty type erasure going there
    val authRequest = request.asInstanceOf[AuthenticatedRequest[TokenPayload, UserIdentity]]
    val tokenPayload = request.body
    logger.info(s"CAS emergency token generated by ${authRequest.user.email}: ${tokenPayload.obfuscatedToken}")

    Ok(Json.obj("token" -> tokenPayload.token))
  }
}
